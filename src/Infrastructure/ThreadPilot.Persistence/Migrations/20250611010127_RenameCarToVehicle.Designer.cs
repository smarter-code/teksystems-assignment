// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ThreadPilot.Persistence.Context;

#nullable disable

namespace ThreadPilot.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250611010127_RenameCarToVehicle")]
    partial class RenameCarToVehicle
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ThreadPilot.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT")
                        .HasColumnName("code");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("TEXT")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("currencies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "USD",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EUR",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = 3,
                            Code = "SEK",
                            Symbol = "kr"
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.HealthInsuranceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("health_insurance_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<int>("HealthInsuranceTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("health_insurance_type_id");

                    b.Property<decimal>("MonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("monthly_cost");

                    b.Property<long>("PolicyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("policy_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("HealthInsuranceTypeId");

                    b.HasIndex("PolicyId")
                        .IsUnique()
                        .HasDatabaseName("idx_health_details_policy");

                    b.ToTable("health_insurance_details", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            HealthInsuranceTypeId = 1,
                            MonthlyCost = 20m,
                            PolicyId = 2L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            HealthInsuranceTypeId = 1,
                            MonthlyCost = 20m,
                            PolicyId = 4L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            HealthInsuranceTypeId = 1,
                            MonthlyCost = 20m,
                            PolicyId = 8L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.HealthInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("health_insurance_type_id");

                    b.Property<decimal>("BaseMonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("base_monthly_cost");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("health_insurance_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseMonthlyCost = 20m,
                            CurrencyId = 1,
                            TypeName = "Health Insurance"
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.InsurancePolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("policy_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("end_date");

                    b.Property<int>("InsuranceTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("insurance_type_id");

                    b.Property<long>("PersonId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("policy_number");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT")
                        .HasColumnName("start_date");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceTypeId");

                    b.HasIndex("PolicyNumber")
                        .IsUnique();

                    b.HasIndex("PersonId", "InsuranceTypeId")
                        .HasDatabaseName("idx_policies_person_type");

                    b.ToTable("insurance_policies", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 1,
                            PersonId = 1L,
                            PolicyNumber = "POL-001-PET",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 2,
                            PersonId = 1L,
                            PolicyNumber = "POL-001-HEALTH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 3,
                            PersonId = 1L,
                            PolicyNumber = "POL-001-VEH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 2,
                            PersonId = 2L,
                            PolicyNumber = "POL-002-HEALTH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 3,
                            PersonId = 2L,
                            PolicyNumber = "POL-002-VEH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 1,
                            PersonId = 3L,
                            PolicyNumber = "POL-003-PET",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 3,
                            PersonId = 4L,
                            PolicyNumber = "POL-004-VEH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InsuranceTypeId = 2,
                            PersonId = 4L,
                            PolicyNumber = "POL-004-HEALTH",
                            StartDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.InsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("insurance_type_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.ToTable("insurance_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Pet"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Health"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Vehicle"
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("person_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("PersonalIdentificationNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PersonalIdentificationNumber")
                        .IsUnique()
                        .HasDatabaseName("idx_persons_pin");

                    b.ToTable("persons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonalIdentificationNumber = "8905152384",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonalIdentificationNumber = "9211302391",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonalIdentificationNumber = "8501011234",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonalIdentificationNumber = "9512245678",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            PersonalIdentificationNumber = "0107089012",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.PetInsuranceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pet_insurance_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("MonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("monthly_cost");

                    b.Property<int>("PetInsuranceTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("pet_insurance_type_id");

                    b.Property<long>("PolicyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("policy_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PetInsuranceTypeId");

                    b.HasIndex("PolicyId")
                        .IsUnique()
                        .HasDatabaseName("idx_pet_details_policy");

                    b.ToTable("pet_insurance_details", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            MonthlyCost = 10m,
                            PetInsuranceTypeId = 1,
                            PolicyId = 1L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            MonthlyCost = 10m,
                            PetInsuranceTypeId = 1,
                            PolicyId = 6L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.PetInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("pet_insurance_type_id");

                    b.Property<decimal>("BaseMonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("base_monthly_cost");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("pet_insurance_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseMonthlyCost = 10m,
                            CurrencyId = 1,
                            TypeName = "Pet Insurance"
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("Vehicle", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Color = "Red",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Tesla Model 3",
                            RegistrationNumber = "ABC123",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2L,
                            Color = "Blue",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "BMW X5",
                            RegistrationNumber = "XYZ789",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3L,
                            Color = "White",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Mercedes C-Class",
                            RegistrationNumber = "KLM456",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4L,
                            Color = "Black",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Audi A4",
                            RegistrationNumber = "DEF12A",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5L,
                            Color = "Silver",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Model = "Volvo XC90",
                            RegistrationNumber = "GHI34B",
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.VehicleInsuranceDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_insurance_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("created_at");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<decimal>("MonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("monthly_cost");

                    b.Property<long>("PolicyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("policy_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasColumnName("updated_at");

                    b.Property<long>("VehicleId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_id");

                    b.Property<int>("VehicleInsuranceTypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_insurance_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PolicyId")
                        .IsUnique()
                        .HasDatabaseName("idx_vehicle_details_policy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleInsuranceTypeId");

                    b.ToTable("vehicle_insurance_details", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            MonthlyCost = 30m,
                            PolicyId = 3L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 1L,
                            VehicleInsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            MonthlyCost = 30m,
                            PolicyId = 5L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 2L,
                            VehicleInsuranceTypeId = 1
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrencyId = 1,
                            MonthlyCost = 30m,
                            PolicyId = 7L,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            VehicleId = 4L,
                            VehicleInsuranceTypeId = 1
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.VehicleInsuranceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("vehicle_insurance_type_id");

                    b.Property<decimal>("BaseMonthlyCost")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT")
                        .HasColumnName("base_monthly_cost");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("currency_id");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT")
                        .HasColumnName("type_name");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("vehicle_insurance_types", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseMonthlyCost = 30m,
                            CurrencyId = 1,
                            TypeName = "Vehicle Insurance"
                        });
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.HealthInsuranceDetail", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.HealthInsuranceType", "HealthInsuranceType")
                        .WithMany("HealthInsuranceDetails")
                        .HasForeignKey("HealthInsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.InsurancePolicy", "Policy")
                        .WithOne("HealthInsuranceDetail")
                        .HasForeignKey("ThreadPilot.Domain.Entities.HealthInsuranceDetail", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("HealthInsuranceType");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.HealthInsuranceType", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.InsurancePolicy", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.InsuranceType", "InsuranceType")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("InsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.Person", "Person")
                        .WithMany("InsurancePolicies")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InsuranceType");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.PetInsuranceDetail", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.PetInsuranceType", "PetInsuranceType")
                        .WithMany("PetInsuranceDetails")
                        .HasForeignKey("PetInsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.InsurancePolicy", "Policy")
                        .WithOne("PetInsuranceDetail")
                        .HasForeignKey("ThreadPilot.Domain.Entities.PetInsuranceDetail", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("PetInsuranceType");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.PetInsuranceType", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.VehicleInsuranceDetail", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.InsurancePolicy", "Policy")
                        .WithOne("VehicleInsuranceDetail")
                        .HasForeignKey("ThreadPilot.Domain.Entities.VehicleInsuranceDetail", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleInsuranceDetails")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ThreadPilot.Domain.Entities.VehicleInsuranceType", "VehicleInsuranceType")
                        .WithMany("VehicleInsuranceDetails")
                        .HasForeignKey("VehicleInsuranceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Policy");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleInsuranceType");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.VehicleInsuranceType", b =>
                {
                    b.HasOne("ThreadPilot.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.HealthInsuranceType", b =>
                {
                    b.Navigation("HealthInsuranceDetails");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.InsurancePolicy", b =>
                {
                    b.Navigation("HealthInsuranceDetail")
                        .IsRequired();

                    b.Navigation("PetInsuranceDetail")
                        .IsRequired();

                    b.Navigation("VehicleInsuranceDetail")
                        .IsRequired();
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.InsuranceType", b =>
                {
                    b.Navigation("InsurancePolicies");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.Person", b =>
                {
                    b.Navigation("InsurancePolicies");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.PetInsuranceType", b =>
                {
                    b.Navigation("PetInsuranceDetails");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.Vehicle", b =>
                {
                    b.Navigation("VehicleInsuranceDetails");
                });

            modelBuilder.Entity("ThreadPilot.Domain.Entities.VehicleInsuranceType", b =>
                {
                    b.Navigation("VehicleInsuranceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
